# Code Cleaner Buffet 🍜

[![Build](https://img.shields.io/travis/evolutics/code-cleaner-buffet)](https://travis-ci.org/evolutics/code-cleaner-buffet)

Build your own Alpine Docker image with just the code formatters and linters you choose.

In a hurry? Jump to [quick start](#quick-start)!

## Motivation

Code cleaners such as formatters and linters are powerful tools to support clean code. As most software projects use a mix of programming languages, it is desirable to apply a number of such code cleaners.

This project helps you with installing the code cleaners you need, in the versions you choose. Just serve yourself from the buffet.

## Features

- Easy installation of multiple code cleaners.
- The original code cleaner interfaces are preserved. This is not an adapter.
- Choose the version you need per code cleaner. Upgrade to the latest versions without having to wait for a release of this project.
- Separation of the code cleaner environment from your development environment.
- Docker images of a fairly minimal size. Code cleaners you do not choose do not add to the size.
- No need to install anything other than Docker and Git.

## Quick start

Prerequisites: Docker and Git.

1. Choose the code cleaners you need from the [list below](#index), and decide on a version for each.

   **Example:** In a project with Python, YAML, and Markdown code, you may choose the code formatters [Black](#black) 19.10b0 and [Prettier](#prettier) 1.19.1.

1. Build your own Docker image by running

   ```bash
   docker build \
     --build-arg bar=1.2.3 \
     --build-arg foo=2.0 \
     … \
     --tag plate \
     https://github.com/evolutics/code-cleaner-buffet.git#0.5.0
   ```

   For each chosen code cleaner, pass a `--build-arg` with a name-version pair. The build uses the Dockerfile of the repository at above URL, which refers to release `0.5.0` here.

   **Example:**

   ```bash
   docker build \
     --build-arg black=19.10b0 \
     --build-arg prettier=1.19.1 \
     --tag plate \
     https://github.com/evolutics/code-cleaner-buffet.git#0.5.0
   ```

1. Now the code cleaners are available in the Docker image `plate`. Enjoy your meal.

   **Example:** Check your code with

   ```bash
   docker run --rm --volume "$(pwd)":/workdir plate \
     sh -c 'black --check --diff . && prettier --check "**/*.+(md|yaml|yml)"'
   ```

## Usage in continuous integration

First, build a custom Docker image of code cleaners (see [quick start](#quick-start)). We assume your image is available as `me/plate:1.2.3` from a Docker registry. In case of Docker Hub, you can do this with `docker push me/plate:1.2.3`, where `me` is your username.

In the following, we demonstrate how to integrate code cleaners into different continuous integration systems, using `black --check --diff .` as an example.

### CircleCI

Adjust your `.circleci/config.yml` file to include

```yaml
version: 2
jobs:
  build:
    docker:
      - image: me/plate:1.2.3
    steps:
      - checkout
      - run: black --check --diff .
```

### Jenkins

Adjust your `Jenkinsfile` to include

```jenkinsfile
pipeline {
    agent none
    stages {
        stage('Build') {
            agent {
                docker { image 'me/plate:1.2.3' }
            }
            steps {
                sh 'black --check --diff .'
            }
        }
    }
}
```

### Travis CI

Adjust your `.travis.yml` file to include

```yaml
services:
  - docker

install:
  - docker pull me/plate:1.2.3

script:
  - >
    docker run --rm --volume "${TRAVIS_BUILD_DIR}":/workdir me/plate:1.2.3
      sh -c 'black --check --diff .'
```

## Frequently asked questions

<dl>
<dt>What is the default working directory?</dt>
<dd>

It is `/workdir`. You may mount to it with `docker run --volume "$(pwd)":/workdir …`.

</dd>

<dt>How can I prevent certain code cleaners from changing the owner of edited files?</dt>
<dd>

Use `docker run --user "$(id --user):$(id --group)" …`.

</dd>

<dt>How do I change the Alpine base image version?</dt>
<dd>

When building, additionally pass `--build-arg _alpine=…` with your desired version.

</dd>

<dt>How does this work?</dt>
<dd>

This uses the tool [Buffet](https://github.com/evolutics/buffet).

</dd>
</dl>

## Index

{{#dishes}}
{{#option}}{{> dish_link.md.mustache}}{{> gap.md.mustache}}{{/option}}
{{/dishes}}

### By category

{{#tag_groups.info_evolutics_buffet_categories}}
{{> tag_group.md.mustache}}
{{/tag_groups.info_evolutics_buffet_categories}}

### By language

{{#tag_groups.info_evolutics_buffet_languages}}
{{> tag_group.md.mustache}}
{{/tag_groups.info_evolutics_buffet_languages}}

## Dishes
{{#dishes}}

### `{{option}}`

[**{{metadata.title}}**]({{metadata.url}})

<details>

[↻ Available versions]({{#metadata.tags.info_evolutics_buffet_versions-url}}{{.}}{{/metadata.tags.info_evolutics_buffet_versions-url}})

[🏷 Categories:](#by-category)
{{#metadata.tags.info_evolutics_buffet_categories}}
{{> gap.md.mustache}}{{.}}
{{/metadata.tags.info_evolutics_buffet_categories}}
{{^metadata.tags.info_evolutics_buffet_categories}}
{{> gap.md.mustache}}–
{{/metadata.tags.info_evolutics_buffet_categories}}

[📜 Languages:](#by-language)
{{#metadata.tags.info_evolutics_buffet_languages}}
{{> gap.md.mustache}}{{.}}
{{/metadata.tags.info_evolutics_buffet_languages}}
{{^metadata.tags.info_evolutics_buffet_languages}}
{{> gap.md.mustache}}–
{{/metadata.tags.info_evolutics_buffet_languages}}

🚀 Quick start:

```bash
docker build \
  --build-arg {{option}}={{#metadata.tags.info_evolutics_buffet_version-example}}{{.}}{{/metadata.tags.info_evolutics_buffet_version-example}} \
  --tag plate \
  https://github.com/evolutics/code-cleaner-buffet.git#0.5.0
docker run -it --rm plate
{{{health_check}}}
```

[… Dockerfile]({{dockerfile_path}})

</details>
{{/dishes}}
